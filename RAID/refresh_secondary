#!/bin/bash
#
# Copyright (c) 2020-2021, 2023-2025 NVI, Inc.
#
# This file is part of FSL11 Linux distribution.
# (see http://github.com/nvi-inc/fsl11).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

# For systems with GPT LVM RAID arrays, copies the partition table onto
# the second disk (if missing), rebuilds the boot sector and adds the RAID
# partition back into the array as a spare to be rebuilt.

usage() {
	echo "Usage: $(basename $0) [-A][-h][-p]"
	echo -e "  where\t-A\tAllow \"Secondary\" disk to be loaded at start"
	echo -e "  \t-h\tdisplay this help and exit"
	echo -e "  \t-p\tdisplay progress meter while recovering"
}

ACCEPT_LOAD=0
DRY_RUN=0
PROGRESS_METER=0
while getopts "Anph" arg; do
	case $arg in
		A)
			ACCEPT_LOAD=1
			;;
		n)
			DRY_RUN=1
			;;
		p)
			PROGRESS_METER=1
			;;
		h | *)
			usage
			exit 0
			;;
	esac
done

[ $DRY_RUN -eq 0 ] || echo -e "\n!! NB: running in DRY RUN mode ie. no action will actually be taken !!\n"

lockf=/tmp/.accept_load

if [ ! -b /dev/md0 ]; then
	echo "ERROR: RAID /dev/md0 does not exist!!"
	exit 1
fi
if mdadm --detail /dev/md0 2>&1 | grep -qE ": (clean|active) $" ; then
	echo "ERROR: RAID /dev/md0 does not need recovery!!"
	exit 1
fi
if ! mdadm --detail /dev/md0 2>&1 | grep -q ", degraded $" ; then
	echo "ERROR: RAID /dev/md0 is not in a recoverable state"
	exit 1
fi

# Perform sanity checks on primary disk first
SDA=$(basename $(ls -l /sys/block/sd* | cut -d'>' -f2 | grep /ata | sort | head -n 1))

if ! mdadm --detail /dev/md0 | grep -q /dev/$SDA; then
	echo "ERROR: \"Primary\" disk /dev/$SDA is not part of RAID /dev/md0!!"
	exit 1
fi
if [ "$(cat /sys/block/$SDA/removable)" != "0" ]; then
	echo "WARNING: \"Primary\" disk /dev/$SDA is removable:"
	echo -n " /dev/"$SDA": "$(lsblk --nodeps -no tran /dev/$SDA | tr [:lower:] [:upper:]) 
	echo -n " "$(lsblk --nodeps -no type /dev/$SDA)
	echo -n ", model" $(lsblk --nodeps -no model /dev/$SDA)
	echo ", s/n "$(lsblk --nodeps -no serial /dev/$SDA)
	echo -n "Press <Enter> if you wish to continue anyway (Control-C aborts) "
	read $ans
fi
if $(partprobe -ds /dev/$SDA | grep -q msdos) && [ ! -d /boot/efi ]; then
	boot="MBR"
elif [ ! -z "$(sgdisk -i1 /dev/$SDA | grep 'BIOS boot')" ] && [ ! -d /boot/efi ]; then
	boot="BIOS";
elif [ ! -z "$(sgdisk -i1 /dev/$SDA | grep 'EFI [Ss]ystem')" ] && [ -d /boot/efi ]; then
	boot="EFI";
else
	echo "ERROR: Unrecognised boot scheme on \"Primary\" disk /dev/$SDA"
	exit 1
fi

# Ensure the Primary disk is mounted on /boot/efi (ie. not Secondary) if applicable
if [ $boot = "EFI" ]; then
	[ $DRY_RUN -eq 0 ] && umount /boot/efi 2>/dev/null 
	[ $DRY_RUN -eq 0 ] && mount /dev/"$SDA"1 /boot/efi
fi

# Now get the user to load the Secondary disk
SDB=$(basename $(ls -l /sys/block/sd* | cut -d'>' -f2 | grep /ata | sort | head -n 2 | tail -n 1))

if [ $SDB != $SDA ] && [ $ACCEPT_LOAD == 0 ] && ([ ! -O $lockf ] || [ "$(cat $lockf)" != "$(lsblk --nodeps -no serial /dev/$SDB)" ]); then
	echo "ERROR:\"Secondary\" disk /dev/$SDB must not be loaded before start of script"
	echo "(You may want to use the '-A' option to [A]llow if this is intended)"
	exit 1
fi
if [ $SDA == $SDB ] || [ ! -b /dev/$SDB ]; then
	while [ $SDA == $SDB ] || [ ! -b /dev/$SDB ]; do
		echo  -n -e "\rWaiting for \"Secondary\" disk to be loaded, use 'Control-C' to safely abort ... "
		sleep 1
		SDB=$(basename $(ls -l /sys/block/sd* | cut -d'>' -f2 | grep /ata | sort | head -n 2 | tail -n 1))
		if [ $SDA != $(basename $(ls -l /sys/block/sd* | cut -d'>' -f2 | grep /ata | sort | head -n 1)) ]; then
			echo -e "\n\nERROR: Active disk must be in the \"Primary\" slot. Aborting!!"
			exit 1
		fi
	done
	echo  -n -e "\r                                                                               "
	echo  -n -e "\rWaiting for disk /dev/$SDB to settle ... "
	udevadm settle
	sleep 2
	echo -n -e "\r                                         \r"
fi
echo $(lsblk --nodeps -no serial /dev/$SDB) > $lockf

# Perform sanity checks on secondary disk now that it's available
if [ "$(cat /sys/block/$SDB/removable)" != "0" ]; then
	echo "WARNING: \"Secondary\" disk /dev/$SDB is removable:"
	echo -n " /dev/"$SDB": "$(lsblk --nodeps -no tran /dev/$SDB | tr [:lower:] [:upper:])
	echo -n " "$(lsblk --nodeps -no type /dev/$SDB)
	echo -n ", model" $(lsblk --nodeps -no model /dev/$SDB)
	echo ", s/n "$(lsblk --nodeps -no serial /dev/$SDB)
	echo -n "Press <Enter> if you wish to continue anyway (Control-C aborts) "
	read $ans
fi
if mdadm --detail /dev/md0 | grep -q /dev/$SDB; then
	echo "ERROR: \"Secondary\" disk /dev/$SDB is still part of RAID /dev/md0!!"
	echo "(Perhaps you should actually be using 'recover_raid' instead?)"
	exit 1
fi
if grep -q " $SDB" /proc/mdstat; then
	echo "ERROR: \"Foreign\" RAID(s) detected on \"Secondary\" disk /dev/$SDB"
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi
if grep -q ^/dev/$SDB /proc/mounts; then
	echo "ERROR: Some part of \"Secondary\" disk /dev/$SDB is mounted!!"
	exit 1
fi
if [ $(cat /sys/block/md0/size) -gt $(cat /sys/block/$SDB/size) ] ||
    ([ -b /dev/"$SDB"2 ] && [ $(cat /sys/block/md0/size) -gt $(cat /sys/block/$SDB/"$SDB"2/size) ]); then
	echo "ERROR: \"Secondary\" device /dev/$SDB is too small to house RAID /dev/md0"
	exit 1
fi
if [ -b /dev/"$SDB"1 ] && [ ! -z "$(sgdisk -i1 /dev/$SDB | grep 'GUID code')" ] &&
   (( [ $boot = "MBR" ] && ! $(partprobe -ds /dev/$SDB | grep -q msdos) ) ||
    ( [ $boot = "BIOS" ] && [ -z "$(sgdisk -i1 /dev/$SDB | grep 'BIOS boot')" ] ) ||
    ( [ $boot = "EFI" ] && [ -z "$(sgdisk -i1 /dev/$SDB | grep 'EFI [Ss]ystem')" ] )); then
	echo "ERROR: boot scheme on \"Secondary\" disk /dev/$SDB does not match \"Primary\" disk /dev/$SDA"
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi

# Cross-compare state of the RAID partitions
if [ -b /dev/"$SDB"2 ] && [ "$(mdadm --examine -Y /dev/"$SDA"2 | grep MD_UUID | cut -d'=' -f2)" != "$(mdadm --examine -Y /dev/"$SDB"2 | grep MD_UUID | cut -d'=' -f2)" ]; then
	echo "ERROR: \"Secondary\" disk /dev/"$SDB"2 MD_UUID does not match \"Primary\" disk /dev/"$SDA"2"
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi
if [ -b /dev/"$SDB"2 ] && [ $(mdadm --examine -Y /dev/"$SDA"2 | grep TIME | cut -d'=' -f2) -lt $(mdadm --examine -Y /dev/"$SDB"2 | grep TIME | cut -d'=' -f2) ]; then
	echo "ERROR: \"Secondary\" disk /dev/"$SDB"2 TIME is ahead of \"Primary\" disk /dev/"$SDA"2"
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi
if [ -b /dev/"$SDB"2 ] && [ $(mdadm --examine -Y /dev/"$SDA"2 | grep EVENTS | cut -d'=' -f2) -lt $(mdadm --examine -Y /dev/"$SDB"2 | grep EVENTS | cut -d'=' -f2) ]; then
	echo "ERROR: \"Secondary\" disk /dev/"$SDB"2 EVENT count is higher than the \"Primary\" disk /dev/"$SDA"2"
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi

# Check if "Secondary" disk has been booted separately
if [ -b /dev/"$SDB"2 ] && [ "$(mdadm --examine /dev/"$SDB"2 | grep "Array State" | cut -d' ' -f7)" != "AA" ]; then
	echo "ERROR: \"Secondary\" disk /dev/"$SDB"2 has been used separately since last in sync"
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi

# Check age of "Secondary" disk
if [ -b /dev/"$SDB"2 ] && [ $(( $(date +%s) - 86400 )) -lt $(mdadm --examine -Y /dev/"$SDB"2 | grep TIME | cut -d'=' -f2) ]; then
	echo "SANITY CHECK: \"Secondary\" disk /dev/"$SDB"2 TIME is too recent."
	echo "(You may want to use blank_secondary to erase the second disk first)"
	exit 1
fi

# ------------- Everything looks sane so let's set to work ----------------

# First repartition the Secondary disk by cloning the Primary's table if blank
if [ "$(partprobe -s /dev/$SDA | cut -d' ' -f2-)" != "$(partprobe -s /dev/$SDB | cut -d' ' -f2-)" ]; then
	if [ "$(partprobe -s /dev/$SDB | cut -d' ' -f3-)" = "partitions" ]; then
		echo -n "Partitioning blank \"Secondary\" disk /dev/$SDB ... "
		if [ $boot = "MBR" ]; then
			[ $DRY_RUN -eq 0 ] && sfdisk -d /dev/$SDA | sfdisk /dev/$SDB > /dev/null
		else
			[ $DRY_RUN -eq 0 ] && sgdisk -R/dev/$SDB /dev/$SDA > /dev/null
			[ $DRY_RUN -eq 0 ] && sgdisk -G /dev/$SDB > /dev/null
		fi
		[ $DRY_RUN -eq 0 ] && partprobe /dev/$SDB
		echo "done."
	else
		echo "ERROR: Partitioning of \"Secondary\" disk /dev/$SDB does not match \"Primary\" disk /dev/$SDA"
		echo "(You may want to use blank_secondary to erase the second disk first)"
		exit 1
	fi
fi

# Next install the bootloader to the Secondary disk
if [ $boot = "MBR" ] || [ $boot = "BIOS" ]; then
	echo -n "Installing GRUB bootloader in BIOS mode on \"Secondary\" disk /dev/$SDB ... "
	[ $DRY_RUN -eq 0 ] && grub-install /dev/$SDB
	echo "done."
elif [ $boot = "EFI" ]; then
	# Ensure the primary disk is mounted on /boot/efi (not anything else)
	if ! $(grep "/boot/efi" /proc/mounts | grep -q /dev/"$SDA"1); then
		[ $DRY_RUN -eq 0 ] && umount /boot/efi
		[ $DRY_RUN -eq 0 ] && mount /dev/"$SDA"1 /boot/efi
	fi

	echo -n "Installing GRUB bootloader in UEFI mode on \"Secondary\" disk /dev/$SDB ... "
	# Note Debian 9 `grub-install` essentially ignores the second argument and
	# copies the grub EFI shim to /boot/efi, regardless what is mounted there.
	# Instead, we refresh the grub install on the primary, and unmount it to 
	# ensure it is consistent, then copy the whole ESP to the second disk. 
	[ $DRY_RUN -eq 0 ] && grub-install /dev/$SDB 2> /dev/null		# suppress spurious warnings
	[ $DRY_RUN -eq 0 ] && umount /boot/efi
	[ $DRY_RUN -eq 0 ] && cp /dev/"$SDA"1 /dev/"$SDB"1
	# and remount the primary on /boot/efi again
	[ $DRY_RUN -eq 0 ] && mount /dev/"$SDA"1 /boot/efi
	echo "done."
fi

# Then add the Secondary RAID partition as a replacement into the RAIO
echo "Adding \"Secondary\" disk /dev/"$SDB"2 to RAID array /dev/md0 ... "
[ $DRY_RUN -eq 0 ] && mdadm --zero-superblock /dev/"$SDB"2 2> /dev/null	# will fail if disk is blank
[ $DRY_RUN -eq 0 ] && mdadm /dev/md0 --add-spare /dev/"$SDB"2
echo "done."

if [ $DRY_RUN -ne 0 ]; then
	echo -e "\n\"Secondary\" disk /dev/$SDB was hopefully _NOT_ refreshed! ;-)"
	exit 0
fi


# Check that the RAID is now rebuilding ie. the addition succeeded
count=10;
while : ; do
	echo  -n -e "\rWaiting up to $count seconds for RAID /dev/md0 to start rebuilding ... "
	sleep 1
	if  mdadm --detail /dev/md0 | grep -q ", recovering $"; then
           break
	fi
	count=$((count-1))
	if [ $count -le 0 ]; then
		echo -e "\nERROR: RAID /dev/md0 failed to start rebuilding"
		exit 1
	fi
done

# Now RAID is using both disks again, we delete the override interlock file
rm -f $lockf

# Finally report on recovery progress until it completes
if [ "$PROGRESS_METER" -ne 0 ]; then
	echo "(This may safely be interrupted with 'Control-C' if you don't want to wait)"
	while ! grep -q recovery /proc/mdstat; do
		echo "Waiting for recovery ... "
		sleep 1;
	done
#
	while grep -q recovery /proc/mdstat; do
		recovery=$(grep recovery /proc/mdstat | cut -c32-)
		echo -e -n "\r$recovery"
		sleep 1;
	done
	echo -e "\ndone."
else
	echo -e "\n\"Secondary\" disk /dev/$SDB is now being refreshed."
	echo "You can check on the recovery progress with 'mdstat'."
fi
