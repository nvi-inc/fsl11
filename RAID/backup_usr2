#!/bin/bash
#
# Copyright (c) 2024 NVI, Inc.
#
# This file is part of FSL11 Linux distribution.
# (see http://github.com/nvi-inc/fsl11).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
set -e

#--------------------- Comment out the next two lines ---------------------
echo "This script must be customized before use.  See script for details."
exit 1
#--------------------------------------------------------------------------
#
# To customize this script (as 'root') on the Operational system:
#   1. MAKE ABSOLUTELY SURE YOU ARE WORKING ON THE OPERATIONAL SYSTEM.
#   2. Edit '/usr/local/sbin/backup_spare_usr2':
#        A. Comment out the two commands above (add leading '#'s).
#        B  Change the 'spare' in the 'remote_node=spare' line
#           below to the alias (preferred), FQDN, or IP address of your
#           Spare system.
#        C. Save the result.
#   3. Follow the other directions in the 'Installing backup_usr2 for CIS
#      hardening' section of the 'Additional items for FS operations' appendix
#      of the 'CIS Hardening for FSL11' document.
#   4. Test it the first time just after the Spare system's disk has been
#      rotated.

function disable_spare()
{
#disable spare account
  if ! grep -q '^\s*spare\s\+ALL=(ALL).*NOPASSWD:' /etc/sudoers; then
     echo "WARNING: spare account is already disabled"
  else
    sed -i 's/^\(\s*spare\s\+ALL=(ALL)\)\s*NOPASSWD:/\1/' /etc/sudoers
    if grep -q '^\s*spare\s\+ALL=(ALL).*NOPASSWD:' /etc/sudoers; then
       echo "ERROR: disabling spare account failed"
       exit 1
    fi
  fi
}
#prevent stopping
trap '' SIGTSTP
#set disable_spare function on EXIT for safety
trap 'disable_spare' EXIT

#enable spare account
if grep -q '^\s*spare\s\+ALL=(ALL).*NOPASSWD:' /etc/sudoers; then
   echo 'WARNING: spare account is already enabled'
else
  sed -i 's/^\s*spare\s\+ALL=(ALL)/& NOPASSWD:/' /etc/sudoers
  if ! grep -q '^\s*spare\s\+ALL=(ALL) NOPASSWD:' /etc/sudoers; then
     echo 'ERROR: enabling spare account failed'
     exit 1
  fi
fi

# Use your Spare system name in place of 'spare' in the next line
remote_node=spare

# check for spare already active
if ps aux|grep '^root .*sudo --preserve-env rrsync -ro /usr2'|grep -qv grep; then
    echo "ERROR: File transfer already in progress."
    exit 1
fi

#start backup
echo ""
echo "Executing: ssh -t $SUDO_USER@$remote_node sudo refresh_spare_usr2"
cat <<EOT

    You will be prompted for your AUID account password on the 'spare' system
    to run 'refresh_spare_usr2' with 'sudo'. You may be prompted for the same
    password before that to connect to the 'spare' system.

EOT
ssh -o LogLevel=ERROR -t "$SUDO_USER@$remote_node" sudo refresh_spare_usr2

# let remote job start running before exiting, which will disable spare account
count=10
while [ $count -gt 0 ] && ! ps aux|grep '^root .*sudo --preserve-env rrsync -ro /usr2'|grep -qv grep; do
  echo -ne "\rWaiting up to $count seconds for file transfer to start. "
  count=$(( $count - 1 ))
  sleep 1
done
  echo -ne "\r                                                         "
if ! ps aux|grep '^root .*sudo --preserve-env rrsync -ro /usr2'|grep -qv grep; then
  echo -ne "\rERROR: File transfer failed to start.\n"
  exit 1
else
  echo -ne "\rSuccess: File transfer started.\n"
fi
exit 0
